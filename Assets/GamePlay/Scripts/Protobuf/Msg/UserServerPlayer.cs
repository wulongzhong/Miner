// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: UserServerPlayer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MsgPB {

  /// <summary>Holder for reflection information generated from UserServerPlayer.proto</summary>
  public static partial class UserServerPlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for UserServerPlayer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserServerPlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZVc2VyU2VydmVyUGxheWVyLnByb3RvEgVNc2dQQiJrChhVc2VyU2VydmVy",
            "UGxheWVyTG9naW5DMlMSEgoKbV91c2VyTmFtZRgBIAEoCRIPCgdtX2VtYWls",
            "GAIgASgJEhIKCm1fcGFzc3dvcmQYAyABKAkSFgoObV9jYWNoZUxvZ2luSUQY",
            "BCABKAkiVQoYVXNlclNlcnZlclBsYXllckxvZ2luUzJDEhYKDm1fbG9naW5T",
            "dWNjZXNzGAEgASgIEhIKCm1fcGxheWVySWQYAiABKA0SDQoFbV9rZXkYAyAB",
            "KANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MsgPB.UserServerPlayerLoginC2S), global::MsgPB.UserServerPlayerLoginC2S.Parser, new[]{ "MUserName", "MEmail", "MPassword", "MCacheLoginID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MsgPB.UserServerPlayerLoginS2C), global::MsgPB.UserServerPlayerLoginS2C.Parser, new[]{ "MLoginSuccess", "MPlayerId", "MKey" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserServerPlayerLoginC2S : pb::IMessage<UserServerPlayerLoginC2S> {
    private static readonly pb::MessageParser<UserServerPlayerLoginC2S> _parser = new pb::MessageParser<UserServerPlayerLoginC2S>(() => new UserServerPlayerLoginC2S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserServerPlayerLoginC2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MsgPB.UserServerPlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserServerPlayerLoginC2S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserServerPlayerLoginC2S(UserServerPlayerLoginC2S other) : this() {
      mUserName_ = other.mUserName_;
      mEmail_ = other.mEmail_;
      mPassword_ = other.mPassword_;
      mCacheLoginID_ = other.mCacheLoginID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserServerPlayerLoginC2S Clone() {
      return new UserServerPlayerLoginC2S(this);
    }

    /// <summary>Field number for the "m_userName" field.</summary>
    public const int MUserNameFieldNumber = 1;
    private string mUserName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MUserName {
      get { return mUserName_; }
      set {
        mUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "m_email" field.</summary>
    public const int MEmailFieldNumber = 2;
    private string mEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MEmail {
      get { return mEmail_; }
      set {
        mEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "m_password" field.</summary>
    public const int MPasswordFieldNumber = 3;
    private string mPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MPassword {
      get { return mPassword_; }
      set {
        mPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "m_cacheLoginID" field.</summary>
    public const int MCacheLoginIDFieldNumber = 4;
    private string mCacheLoginID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MCacheLoginID {
      get { return mCacheLoginID_; }
      set {
        mCacheLoginID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserServerPlayerLoginC2S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserServerPlayerLoginC2S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MUserName != other.MUserName) return false;
      if (MEmail != other.MEmail) return false;
      if (MPassword != other.MPassword) return false;
      if (MCacheLoginID != other.MCacheLoginID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MUserName.Length != 0) hash ^= MUserName.GetHashCode();
      if (MEmail.Length != 0) hash ^= MEmail.GetHashCode();
      if (MPassword.Length != 0) hash ^= MPassword.GetHashCode();
      if (MCacheLoginID.Length != 0) hash ^= MCacheLoginID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MUserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MUserName);
      }
      if (MEmail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MEmail);
      }
      if (MPassword.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MPassword);
      }
      if (MCacheLoginID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MCacheLoginID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MUserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MUserName);
      }
      if (MEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MEmail);
      }
      if (MPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MPassword);
      }
      if (MCacheLoginID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MCacheLoginID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserServerPlayerLoginC2S other) {
      if (other == null) {
        return;
      }
      if (other.MUserName.Length != 0) {
        MUserName = other.MUserName;
      }
      if (other.MEmail.Length != 0) {
        MEmail = other.MEmail;
      }
      if (other.MPassword.Length != 0) {
        MPassword = other.MPassword;
      }
      if (other.MCacheLoginID.Length != 0) {
        MCacheLoginID = other.MCacheLoginID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MUserName = input.ReadString();
            break;
          }
          case 18: {
            MEmail = input.ReadString();
            break;
          }
          case 26: {
            MPassword = input.ReadString();
            break;
          }
          case 34: {
            MCacheLoginID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserServerPlayerLoginS2C : pb::IMessage<UserServerPlayerLoginS2C> {
    private static readonly pb::MessageParser<UserServerPlayerLoginS2C> _parser = new pb::MessageParser<UserServerPlayerLoginS2C>(() => new UserServerPlayerLoginS2C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserServerPlayerLoginS2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MsgPB.UserServerPlayerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserServerPlayerLoginS2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserServerPlayerLoginS2C(UserServerPlayerLoginS2C other) : this() {
      mLoginSuccess_ = other.mLoginSuccess_;
      mPlayerId_ = other.mPlayerId_;
      mKey_ = other.mKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserServerPlayerLoginS2C Clone() {
      return new UserServerPlayerLoginS2C(this);
    }

    /// <summary>Field number for the "m_loginSuccess" field.</summary>
    public const int MLoginSuccessFieldNumber = 1;
    private bool mLoginSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MLoginSuccess {
      get { return mLoginSuccess_; }
      set {
        mLoginSuccess_ = value;
      }
    }

    /// <summary>Field number for the "m_playerId" field.</summary>
    public const int MPlayerIdFieldNumber = 2;
    private uint mPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPlayerId {
      get { return mPlayerId_; }
      set {
        mPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "m_key" field.</summary>
    public const int MKeyFieldNumber = 3;
    private long mKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MKey {
      get { return mKey_; }
      set {
        mKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserServerPlayerLoginS2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserServerPlayerLoginS2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MLoginSuccess != other.MLoginSuccess) return false;
      if (MPlayerId != other.MPlayerId) return false;
      if (MKey != other.MKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MLoginSuccess != false) hash ^= MLoginSuccess.GetHashCode();
      if (MPlayerId != 0) hash ^= MPlayerId.GetHashCode();
      if (MKey != 0L) hash ^= MKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MLoginSuccess != false) {
        output.WriteRawTag(8);
        output.WriteBool(MLoginSuccess);
      }
      if (MPlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MPlayerId);
      }
      if (MKey != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MLoginSuccess != false) {
        size += 1 + 1;
      }
      if (MPlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MPlayerId);
      }
      if (MKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserServerPlayerLoginS2C other) {
      if (other == null) {
        return;
      }
      if (other.MLoginSuccess != false) {
        MLoginSuccess = other.MLoginSuccess;
      }
      if (other.MPlayerId != 0) {
        MPlayerId = other.MPlayerId;
      }
      if (other.MKey != 0L) {
        MKey = other.MKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MLoginSuccess = input.ReadBool();
            break;
          }
          case 16: {
            MPlayerId = input.ReadUInt32();
            break;
          }
          case 24: {
            MKey = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
